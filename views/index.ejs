<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Stopwatch</title>
  <style>
    body {
  font-family: Arial, sans-serif;
  background: #000000;
  margin: 0;
  padding: 20px;
  display: flex;
  justify-content: center;
  color: #618aab;
}

.container {
  width: 80%;
  text-align: center;
}

.stopwatch-circle {
  width: 310px;
  height: 310px;
  border-radius: 50%;
  border: 8px solid #181919;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 20px auto;
  background: rgb(14, 13, 13);
  box-shadow: 0px 4px 10px rgba(0,0,0,0.2);
}

#display {
  font-size: 2.8rem;
  font-weight: lighter;
  color: #f8fafd;
}

.controls {
  margin: 20px 0;
  
}

.controls button {
  background: #007bff;
  border: none;
  padding: 10px 18px;
  margin: 0 5px;
  color: white;
  font-size: 1rem;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s;
}

.controls button:hover {
  background: #171718;
}

.laps-container, .sessions-container {
  margin-top: 30px;
  text-align: left;
}

h2 {
  margin-bottom: 10px;
  color: #6a8fb7;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 15px;
}

th, td {
  border-radius: 5px;
  margin: 19px;
  padding: 8px 10px;
  text-align: center;
}

th {
  background: #0a0b0b;
  color: white;
}

tr:nth-child(even) {
  background: #232222;
  color: thistle;
}
tr{
  font-weight: lighter ;
  font-size: 1.5rem;
  border-bottom: #a3a6aa 1px solid;
}
tr:nth-child(odd) {
  background: #070707;
  color: rgb(224, 219, 224);
}

.session {
  margin-bottom: 25px;
  padding: 10px;
  border: 1px solid #221f1f;
  background: transparent;
  border-radius: 6px;
  box-shadow: 0px 2px 6px rgba(0,0,0,0.1);
}

  </style>
</head>
<body>
  <div class="container">
    <div class="stopwatch-circle">
      <div id="display">00:00:00.000</div>
    </div>

    <div class="controls">
      <button id="startStop">Start</button>
      <button id="lap">Lap</button>
      <button id="reset">Reset</button>
    </div>

    <div class="laps-container">
      <h2>Current Laps</h2>
      <table>
        <thead>
          <tr>
            <th>#</th>
            <th>Interval</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody id="laps"></tbody>
      </table>
    </div>

    <div class="sessions-container">
      <h2>Saved Sessions</h2>
      <% if (sessions.length > 0) { %>
        <% sessions.forEach((session, sIdx) => { %>
          <div class="session">
            <h3>
              Session <%= sessions.length - sIdx %> 
              (<%= new Date(session.createdAt).toLocaleString() %>)
            </h3>
            <table>
              <thead>
                <tr>
                  <th>Lap</th>
                  <th>Interval</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody>
                <% session.laps.forEach((lap, idx) => { %>
                  <tr>
                    <td><%= idx+1 %></td>
                    <td><%= lap.interval %></td>
                    <td><%= lap.lapTime %></td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        <% }) %>
      <% } else { %>
        <p>No sessions saved yet.</p>
      <% } %>
    </div>
  </div>

  <script>
    let startTime = 0;
let updatedTime = 0;
let difference = 0;
let tInterval;
let running = false;
let lastLapTime = 0;
let laps = [];

// DOM Elements
const display = document.getElementById("display");
const startStopBtn = document.getElementById("startStop");
const lapBtn = document.getElementById("lap");
const resetBtn = document.getElementById("reset");
const lapsContainer = document.getElementById("laps");

function startStop() {
  if (!running) {
    startTime = Date.now() - difference;
    tInterval = setInterval(updateDisplay, 10);
    running = true;
    startStopBtn.innerText = "Pause";
    startStopBtn.style.background = "#ffc107"; // yellow
  } else {
    clearInterval(tInterval);
    running = false;
    difference = Date.now() - startTime;
    startStopBtn.innerText = "Start";
    startStopBtn.style.background = "#28a745"; // green
  }
}

function reset() {
  clearInterval(tInterval);
  running = false;
  difference = 0;
  lastLapTime = 0;

  // ðŸ”¥ First save laps (if any) before clearing
  if (laps.length > 0) {
    fetch("/save", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ laps })
    })
    .then(res => res.json())
    .then(() => {
      clearUI();
      window.location.reload(); // reload to see saved sessions
    })
    .catch(err => {
      console.error("Error saving laps:", err);
      clearUI(); // still reset UI if save fails
    });
  } else {
    clearUI();
  }
}

function clearUI() {
  laps = [];
  updateLapsUI();
  display.innerText = "00:00:00.000";
  startStopBtn.innerText = "Start";
  startStopBtn.style.background = "#28a745"; // green
}

function lap() {
  if (!running) return;

  let totalTime = Date.now() - startTime;
  let interval = totalTime - lastLapTime;
  lastLapTime = totalTime;

  const lapObj = {
    interval: formatTime(interval),
    lapTime: formatTime(totalTime)
  };

  laps.push(lapObj);
  updateLapsUI();
}

function updateLapsUI() {
  lapsContainer.innerHTML = "";
  laps.forEach((lap, idx) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>${idx + 1}</td>
      <td>${lap.interval}</td>
      <td>${lap.lapTime}</td>
    `;
    lapsContainer.appendChild(row);
  });
}

function updateDisplay() {
  updatedTime = Date.now() - startTime;
  display.innerText = formatTime(updatedTime);
}

function formatTime(ms) {
  let milliseconds = parseInt((ms % 1000), 10);
  let seconds = parseInt((ms / 1000) % 60, 10);
  let minutes = parseInt((ms / (1000 * 60)) % 60, 10);
  let hours = parseInt((ms / (1000 * 60 * 60)) % 24, 10);

  hours = (hours < 10) ? "0" + hours : hours;
  minutes = (minutes < 10) ? "0" + minutes : minutes;
  seconds = (seconds < 10) ? "0" + seconds : seconds;
  milliseconds = milliseconds.toString().padStart(3, "0");

  return `${hours}:${minutes}:${seconds}.${milliseconds}`;
}

// Initial button colors
startStopBtn.style.background = "#28a745"; // green
lapBtn.style.background = "#007bff";       // blue
resetBtn.style.background = "#dc3545";     // red

// Event Listeners
startStopBtn.addEventListener("click", startStop);
lapBtn.addEventListener("click", lap);
resetBtn.addEventListener("click", reset);

</script>
</body>
</html>



<!--
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chrono - Stopwatch with Lap Tracking</title>
  <style>
    
    
/* General Reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Segoe UI", sans-serif;
  background: #121212;
  color: #fff;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  min-height: 100vh;
  padding: 1rem;
}

/* Circle Lamina */
.stopwatch-circle {
  position: relative;
  width: 280px;
  height: 280px;
  border-radius: 50%;
  border: 6px solid #333;
  display: flex;
  align-items: center;
  justify-content: center;
  background: radial-gradient(circle, #1e1e1e 70%, #000);
  margin: 1rem 0;
  box-shadow: 0 0 20px rgba(0,0,0,0.6);
}

#display {
  font-size: 1.8rem;
  font-weight: bold;
  text-align: center;
  color: #00bfff;
}

/* Control Buttons */
.controls {
  display: flex;
  gap: 1rem;
  margin: 1rem 0;
}

button {
  padding: 0.8rem 1.6rem;
  font-size: 1rem;
  border: none;
  border-radius: 50px;
  cursor: pointer;
  transition: 0.3s ease;
}

button:hover {
  opacity: 0.8;
}

#startStop {
  background: #00bfff;
  color: #fff;
}

#lap {
  background: #444;
  color: #fff;
}

#reset {
  background: #ff4444;
  color: #fff;
}

/* Laps Table */
.laps-container {
  width: 100%;
  max-width: 360px;
  margin-top: 1rem;
}

.laps-container table {
  width: 100%;
  border-collapse: collapse;
  background: #1e1e1e;
  border-radius: 8px;
  overflow: hidden;
}

.laps-container th, 
.laps-container td {
  padding: 0.6rem;
  text-align: center;
  font-size: 0.9rem;
  border-bottom: 1px solid #333;
}

.laps-container th {
  background: #222;
  font-weight: bold;
  color: #aaa;
}

.laps-container tr:last-child td {
  border-bottom: none;
}

  
    /* ====== THEME ====== */
    /*
:root {
  --bg: #0c0f14;
  --card: #141923;
  --muted: #8892a6;
  --text: #e6e9ef;
  --accent: #6ea8fe;
  --accent-2: #7bffcf;
  --success: #66d9a8;
  --danger: #ff7b7b;
  --shadow: 0 10px 25px rgba(0,0,0,.35);
  --radius: 18px;
}

* { box-sizing: border-box; }

html, body {
  height: 100%;
  background: radial-gradient(1200px 800px at 20% -10%, #182031 0%, var(--bg) 40%) fixed;
  color: var(--text);
  font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
  line-height: 1.4;
  margin: 0;
}

.container {
  max-width: 1000px;
  margin: 40px auto;
  padding: 0 20px;
}

.grid {
  display: grid;
  grid-template-columns: 420px 1fr;
  gap: 24px;
}
@media (max-width: 960px) { .grid { grid-template-columns: 1fr; } }

.card {
  margin: auto;
  display: grid;
  background: linear-gradient(180deg, #121722 0%, #0e1420 100%);
  border: 1px solid rgba(255,255,255,.06);
  box-shadow: var(--shadow);
  border-radius: var(--radius);
  padding: 20px;
}


.clock-wrap {
  display: grid;
  place-items: center;
  padding: 12px;
}

.clock {
  width: 300px;
  height: 300px;
  border-radius: 50%;
  display: grid;
  place-items: center;
  position: relative;
  background:
    radial-gradient(120px 120px at 50% 50%, rgba(110,168,254,.12), transparent 60%),
    linear-gradient(180deg, #0c0f14, #101625);
  border: 10px solid transparent;
  background-clip: padding-box, border-box;
  
  --ring: conic-gradient(from 0deg, var(--accent), var(--accent-2), var(--accent));
  mask:
    radial-gradient(closest-side, transparent 75%, #000 0) subtract,
    radial-gradient(farthest-side, #000 0, #000 100%);
  -webkit-mask:
    radial-gradient(closest-side, transparent 75%, #000 0) subtract,
    radial-gradient(farthest-side, #000 0, #000 100%);
}
.clock::before {
  content: "";
  position: absolute;
  inset: -10px;
  border-radius: inherit;
  background: var(--ring);
  z-index: -1;
  filter: blur(6px) saturate(120%);
  opacity: .9;
}

#display {
display: block;
  font-variant-numeric: tabular-nums;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  font-size: 34px;
  letter-spacing: .5px;
  padding: 12px 18px;
  background: rgba(255,255,255,.03);
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 14px;
  box-shadow: inset 0 0 0 1px rgba(255,255,255,.02);
}

.controls {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
  justify-content: center;
  margin-top: 16px;
}
.btn {
  appearance: none;
  border: 1px solid rgba(255,255,255,.08);
  background: linear-gradient(180deg, #192133, #121a2a);
  color: var(--text);
  padding: 10px 16px;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: transform .06s ease, box-shadow .2s ease, border-color .2s ease;
  box-shadow: 0 6px 16px rgba(0,0,0,.3);
}
.btn:hover { border-color: rgba(255,255,255,.16); transform: translateY(-1px); }
.btn:active { transform: translateY(0); }
.btn.accent { background: linear-gradient(180deg, #2a61d6, #214db0); }
.btn.success { background: linear-gradient(180deg, #1c6f53, #165a44); }
.btn.danger  { background: linear-gradient(180deg, #822f2f, #6a2424); }

.tabs {
  display:block;
  gap: 12px;
}

.tab-heads {
  display:contents;
  grid-auto-flow: column;
  gap: 8px;
  align-items: center;
}
.tab-heads label {
  text-align: center;
  background: #0f1623;
  border: 1px solid rgba(255,255,255,.06);
  color: var(--muted);
  padding: 10px 12px;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  user-select: none;
  transition: color .2s, border-color .2s, background .2s;
}
.tab-heads label:hover { color: var(--text); border-color: rgba(255,255,255,.12); }

.tab-body {
  background: #0f1623;
  border: 1px solid rgba(255,255,255,.06);
  border-radius: 14px;
  padding: 16px;
  min-height: 260px;
}

input[name="tab"] { display: none; }

#tab-current:checked ~ .tab-heads label[for="tab-current"],
#tab-saved:checked ~ .tab-heads label[for="tab-saved"] {
  color: var(--text);
  background: linear-gradient(180deg, #162135, #111a2a);
  border-color: rgba(110,168,254,.35);
  box-shadow: 0 6px 18px rgba(110,168,254,.15);
}

.panel { display: none; }
#tab-current:checked ~ .tab-body .panel.current { display: block; }
#tab-saved:checked   ~ .tab-body .panel.saved   { display: block; }

.laps-list, .sessions-list {
  list-style: none;
  padding: 0;
  margin: 0;
  max-height: 360px;
  overflow: auto;
}
.laps-list li, .sessions-list li {
  display: flex;
  justify-content: space-between;
  gap: 10px;
  padding: 10px 12px;
  margin: 6px 0;
  border: 1px solid rgba(255,255,255,.06);
  background: rgba(255,255,255,.02);
  border-radius: 12px;
}
.badge {
  padding: 4px 8px;
  border-radius: 999px;
  font-size: 12px;
  font-weight: 700;
  letter-spacing: .3px;
  border: 1px solid rgba(255,255,255,.12);
  background: rgba(255,255,255,.04);
}

.h3 {
  margin: 0 0 10px 0;
  font-size: 18px;
  color: var(--muted);
  letter-spacing: .3px;
}

.muted { color: var(--muted); }
.center { text-align: center; }
.spacer { height: 12px; }
*/
  </style>
  </head>
  <body>
<div class="container">
  <div class="grid">
    <div class="card">
      <div class="clock-wrap">
        <div class="clock">
          <div id="display">00:00:00.000</div>
        </div>
      </div>
      <div class="controls">
        <button class="btn accent"  onclick="startStop()">Start / Stop</button>
        <button class="btn success" onclick="lap()">Lap</button>
        <button class="btn danger"  onclick="resetAndSave()">Reset & Save</button>
      </div>
    </div>

  
    <div class="card tabs">
      <input type="radio" name="tab" id="tab-current" checked>
      <input type="radio" name="tab" id="tab-saved">

      <div class="tab-heads">
        <label for="tab-current">Current Laps</label>
        <label for="tab-saved">Saved Sessions</label>
      </div>

      <div class="tab-body">
\        <div class="panel current">
          <div class="h3">Live laps</div>
          <ul id="currentLaps" class="laps-list"></ul>
          <div class="spacer"></div>
          <p class="muted center">Use Lap to add. Reset & Save to store.</p>
        </div>

        <div class="panel saved">
          <div class="h3">History</div>
          <% if ((sessions || []).length === 0) { %>
            <p class="muted">No sessions saved yet.</p>
          <% } else { %>
            <ul class="sessions-list">
              <% sessions.forEach((session, sIdx) => { %>
                <li>
                  <div>
                    <strong>Session <%= sessions.length - sIdx %></strong>
                    <div class="muted">
                      <%= session.createdAt ? new Date(session.createdAt).toLocaleString() : '' %>
                    </div>
                  </div>
                  <span class="badge"><%= (session.laps || []).length %> laps</span>
                </li>
                <ul class="laps-list">
                  <% (session.laps || []).forEach((lap, lIdx) => { %>
                    <li>
                      <span>Lap <%= lIdx+1 %> â€” <strong><%= lap.lapTime %></strong></span>
                      <span class="badge">+<%= lap.interval %></span>
                    </li>
                  <% }) %>
                </ul>
              <% }) %>
            </ul>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

  <script>
    let startTime, updatedTime, difference = 0, tInterval, running = false;
let lastLapTime = 0;
let laps = []; // store current laps

const display = document.getElementById("display");
const lapsList = document.getElementById("currentLaps");

function startStop() {
  if (!running) {
    startTime = new Date().getTime() - difference;
    tInterval = setInterval(updateTime, 10);
    running = true;
  } else {
    clearInterval(tInterval);
    running = false;
  }
}

function updateTime() {
  updatedTime = new Date().getTime() - startTime;
  difference = updatedTime;
  display.innerHTML = timeToString(difference);
}

function lap() {
  if (!running) return;
  const totalLap = difference;
  const interval = totalLap - lastLapTime;
  lastLapTime = totalLap;

  const lapObj = {
    lapTime: timeToString(totalLap),
    interval: timeToString(interval)
  };
  laps.push(lapObj);

  const li = document.createElement("li");
  li.innerText = `Lap ${laps.length}: ${lapObj.lapTime} (interval: ${lapObj.interval})`;
  lapsList.appendChild(li);
}

function resetAndSave() {
  clearInterval(tInterval);
  running = false;

  if (laps.length > 0) {
    fetch("/save-session", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ laps })
    }).then(() => location.reload());
  } else {
    location.reload();
  }

  // Reset variables
  difference = 0;
  lastLapTime = 0;
  laps = [];
  display.innerHTML = "00:00:00.000";
  lapsList.innerHTML = "";
}

function timeToString(ms) {
  let milliseconds = parseInt(ms % 1000);
  let seconds = parseInt((ms / 1000) % 60);
  let minutes = parseInt((ms / (1000 * 60)) % 60);
  let hours = parseInt((ms / (1000 * 60 * 60)) % 24);

  return (
    (hours < 10 ? "0" + hours : hours) + ":" +
    (minutes < 10 ? "0" + minutes : minutes) + ":" +
    (seconds < 10 ? "0" + seconds : seconds) + "." +
    milliseconds.toString().padStart(3, "0")
  );
}
// inside lap() after computing lapObj
const li = document.createElement("li");
li.innerHTML = `
  <span>Lap ${laps.length} â€” <strong>${lapObj.lapTime}</strong></span>
  <span class="badge">+${lapObj.interval}</span>
`;
document.getElementById("currentLaps").appendChild(li);

  </script>
</body>
</html>
-->